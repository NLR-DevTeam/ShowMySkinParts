import groovy.json.JsonBuilder

plugins {
    id 'java-library'
}

group(project.mod_maven_group)
version(project.parent.version)

base {
    archivesName = "${project.mod_archives_base_name}-${project.mod_version}-all"
}

def fabric_subprojects = project.parent.subprojects.findAll({
    it.name != "fabricWrapper"
})

fabric_subprojects.collect {
    evaluationDependsOn(":${it.name}")
}

jar {
    // disable cache
    outputs.upToDateWhen { false }

    dependsOn(fabric_subprojects.collect {
        it.tasks.remapJar
    })

    doFirst {
        delete fileTree("build/tmp/submods/META-INF/jars")

        copy {
            from {
                fabric_subprojects.collect {
                    it.remapJar.outputs.files
                }
            }

            into("build/tmp/submods/META-INF/jars")
        }
    }

    from("../LICENSE")
    from("build/tmp/submods")
}

processResources {
    // disable cache
    outputs.upToDateWhen { false }
    ArrayList<?> mc_condition = []
    ArrayList<?> jars = []

    fabric_subprojects.each({
        Arrays.stream(it.minecraft_dependency.split(','))
                .map { it.trim() }
                .forEach { mc_condition.add(it) }
        jars.add(["file": "META-INF/jars/${project.mod_archives_base_name}-${project.mod_version}-${it.minecraft_version}.jar"])
    })

    from("${rootDir}/src/main/resources/assets/show-my-skin-parts/icon.png") {
        into("assets/${project.mod_id}")
    }

    filesMatching("fabric.mod.json") {
        expand([
                "minecraft_dependency": new JsonBuilder(mc_condition),
                "mod_description"     : project.mod_description,
                "mod_homepage"        : project.mod_homepage,
                "mod_id"              : project.mod_id,
                "mod_license"         : project.mod_license,
                "mod_name"            : project.mod_name,
                "mod_version"         : project.mod_version,
                "mod_sources"         : project.mod_sources,
                "sub_jars"            : new JsonBuilder(jars).toPrettyString(),
        ])
    }
}

java {
    sourceCompatibility(JavaVersion.VERSION_17)
    targetCompatibility(JavaVersion.VERSION_17)
}